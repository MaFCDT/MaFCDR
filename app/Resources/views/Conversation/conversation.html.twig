{% extends "Conversation/layout.html.twig" %}

{% block content %}
<h2>{{ 'conversation.title'|trans({}, "conversations")|title }}</h2>

{% include "Conversation/one_conversation.html.twig" with {"messages": messages, "conversation": conversation, "last": last} %}

<div id="replydialog" title="{{ 'message.reply.title'|trans({}, "conversations")|title }}">
	<button id="syntaxhelp" class="cmsg_button">syntax help</button>
	<div id="help" style="display:none">
		You can use <a href="http://daringfireball.net/projects/markdown/syntax">markdown syntax</a>:
		<ul class="simple">
			<li># Huge Header</li>
			<li>## Large Header</li>
			<li>### Header</li>
			<li><em>*emphasis*</em></li>
			<li><strong>**strong emphasis**</strong></li>
			<li><strong><em>***extra strong emphasis***</em></strong></li>
			<li>make unordered lists by beginning each line with a single *<li>
			<li>second-level sub unordered lists can be done with a space and then a * at the beginning of the line</li>
			<li>...or numbered lists by using 1. 2. 3.<li>
			<li>...but maybe you don't want a list, so add a \ after the number and before the period like this: 2015\.</li>
			<li>you can also blockquote a paragraph like this by leading with a ></li>
			<li>...or even double or triple indent by adding more > symbols.</li>
			<li>...or even add numbered or unordered lists in that block quote!</li>
		</ul>
	</div>
	{{ render(controller('BM2\\SiteBundle\\Controller\\ConversationController::replyAction', { 'conv': conversation })) }}
</div>

{% endblock %}

{% block jquery %}
var request;
$("button.convo_leave").click(function(){
	var id = $(this).data('id');

	// abort any pending request
	if (request) {
		request.abort();
	}

	var target = $(this).parent();
	// fire off the request
	request = $.ajax({
		url: "{{ path('cmsg_leave') }}",
		type: "post",
		data: { 'id': id },
	});

	// callback handler that will be called on success
	request.done(function (response, textStatus, jqXHR){
		window.location = "{{ path('cmsg_index') }}";
	});

	// callback handler that will be called on failure
	request.fail(function (jqXHR, textStatus, errorThrown){
		$("#ajax_errors").html(textStatus);
	});

});

realmselect($("#realmsearch"), realmchange);
settlementselect($("#settlementsearch"), settlementchange);
charselect($("#charactersearch"), characterchange);

{% include "BM2SiteBundle:element:autocomplete.js.twig" %}

function search_insert(insert) {
	var caretPos = document.getElementById("message_reply_content").selectionStart;
	var textAreaTxt = $("#message_reply_content").val();
	$("#message_reply_content").val(textAreaTxt.substring(0, caretPos) + insert + textAreaTxt.substring(caretPos) );

}

function realmchange(id, name) {
	search_insert("[r:"+id+"]");
}
function settlementchange(id, name) {
	search_insert("[s:"+id+"]");
}
function characterchange(id, name) {
	search_insert("[c:"+id+"]");
}

$("#syntaxhelp").click(function(){
	$("#help").toggle();
});

var redirect = false;
var insert = null;

$("#replydialog").dialog({
	autoOpen: false,
	width: "65%",
	position: { my: "center top", at: "center bottom", of: $("#symfony-header") }
});

$(".cmsg_conversation").on("click", "button.topicreply", function(){
	insert = $(this).closest('.cmsg_conversation').children('.cmsg_general').first();
	var id = $(this).data('id');
	redirect = false;
	replyform("{{ 'conversation.reply.title'|trans({}, "conversations")|title }}", id, 0);
});

$(".cmsg_conversation").on("click", "button.reply", function(){
	insert = $(this).closest('.cmsg_conversation').children('.cmsg_general').first();
	var id = $(this).closest('.cmsg_message').data('id');
	redirect = false;
	replyform("{{ 'message.reply.title'|trans({}, "conversations")|title }}", {{ conversation.id }}, id);
});

function replyform(title, conversation, reply_to) {
	$("#replydialog").dialog("option", "title", title);
	$("#message_reply_topic").parent().hide();
	$("#replydialog").dialog("open");
	$("#message_reply_conversation").val(conversation);
	$("#message_reply_reply_to").val(reply_to);

	$("#replydialog form").attr('action', '{{ path('maf_conv_reply', {conv: conversation.id}) }}');
}


var request;
var target;

$(".cmsg_flags").on("click", "button.cmsg_icon", function(){
	var button = $(this);
	var id = button.data("msg");
	var flag = button.data("flag");

	button.addClass("working");
	$.post("{{ path('cmsg_flags')}}", {'message':id, 'flag':flag}, function(result) {
		button.removeClass("working");
		if (result == 'added') {
			button.addClass("active");
		} else if (result == 'removed') {
			button.removeClass("active");
		}
	});
});

$("#oldmessages").hide();
var old_visible = false;
$("#hidetoggle").click(function(){
	if (old_visible) {
		$("#hidetoggle").html("{{ 'conversation.old.show'|trans({},"conversations") }}");
		$("#oldmessages").hide("blind", 1200);
		old_visible = false;
	} else {
		$("#hidetoggle").html("{{ 'conversation.old.hide'|trans({},"conversations") }}");
		$("#oldmessages").show("blind", 1200);
		old_visible = true;
	}
});
{% endblock %}
